{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from 'react';\n\n/**\n * Hook pour gérer l'état du questionnaire\n * @returns {Object} État et fonctions pour gérer le questionnaire\n */\nexport const useSurveyState = () => {\n  _s();\n  // États pour la gestion des étapes\n  const [currentStep, setCurrentStep] = useState(0);\n  const [submitted, setSubmitted] = useState(false);\n\n  // États pour les données du questionnaire\n  const [ratings, setRatings] = useState({});\n  const [comments, setComments] = useState({});\n  const [personalInfo, setPersonalInfo] = useState({\n    age: '',\n    nationality: '',\n    travelPurpose: '',\n    frequency: ''\n  });\n\n  // État pour les fonctionnalités additionnelles\n  const [showFlightRadar, setShowFlightRadar] = useState(false);\n\n  // Gestionnaires d'événements\n  const handleRatingChange = (questionId, value) => {\n    setRatings(prev => ({\n      ...prev,\n      [questionId]: value\n    }));\n  };\n  const handleCommentChange = (categoryId, value) => {\n    setComments(prev => ({\n      ...prev,\n      [categoryId]: value\n    }));\n  };\n  const handleContinueToEvaluation = () => {\n    setCurrentStep(2);\n  };\n  const handleSubmit = async () => {\n    try {\n      // Préparation des données pour l'API\n      const surveyData = {\n        language: 'fr',\n        // À récupérer du contexte de langue\n        personalInfo: {\n          age: personalInfo.age,\n          nationality: personalInfo.nationality,\n          travelPurpose: personalInfo.travelPurpose,\n          frequency: personalInfo.frequency\n        },\n        ratings,\n        comments\n      };\n\n      // Envoi vers l'API backend\n      const response = await fetch('http://localhost:5000/api/surveys', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(surveyData)\n      });\n      const result = await response.json();\n      if (response.ok && result.success) {\n        console.log('Enquête soumise avec succès:', result.data);\n        setSubmitted(true);\n        setCurrentStep(3);\n\n        // Optionnel: stocker l'ID de session pour référence\n        localStorage.setItem('surveySessionId', result.data.sessionId);\n      } else {\n        throw new Error(result.message || 'Erreur lors de la soumission');\n      }\n    } catch (error) {\n      console.error('Erreur lors de la soumission:', error);\n      // Gestion d'erreur - afficher un message à l'utilisateur\n      alert('Erreur lors de la soumission de l\\'enquête. Veuillez réessayer.');\n    }\n  };\n  const toggleFlightRadar = () => {\n    setShowFlightRadar(prev => !prev);\n  };\n  const resetSurvey = () => {\n    setSubmitted(false);\n    setCurrentStep(0);\n    setRatings({});\n    setComments({});\n    setPersonalInfo({\n      age: '',\n      nationality: '',\n      travelPurpose: '',\n      frequency: ''\n    });\n    setShowFlightRadar(false);\n  };\n  return {\n    // États\n    currentStep,\n    submitted,\n    ratings,\n    comments,\n    personalInfo,\n    showFlightRadar,\n    // Actions\n    setCurrentStep,\n    setPersonalInfo,\n    handleRatingChange,\n    handleCommentChange,\n    handleContinueToEvaluation,\n    handleSubmit,\n    toggleFlightRadar,\n    resetSurvey\n  };\n};\n_s(useSurveyState, \"cdM7kiW0ds0JGjBUsrxQquL4MGg=\");","map":{"version":3,"names":["useState","useSurveyState","_s","currentStep","setCurrentStep","submitted","setSubmitted","ratings","setRatings","comments","setComments","personalInfo","setPersonalInfo","age","nationality","travelPurpose","frequency","showFlightRadar","setShowFlightRadar","handleRatingChange","questionId","value","prev","handleCommentChange","categoryId","handleContinueToEvaluation","handleSubmit","surveyData","language","response","fetch","method","headers","body","JSON","stringify","result","json","ok","success","console","log","data","localStorage","setItem","sessionId","Error","message","error","alert","toggleFlightRadar","resetSurvey"],"sources":["C:/Users/ELAZZOUTISalaheddine/Desktop/Nador-airport-satisfaction-platform/apps/frontend/src/hooks/useSurveyState.js"],"sourcesContent":["import { useState } from 'react';\n\n/**\n * Hook pour gérer l'état du questionnaire\n * @returns {Object} État et fonctions pour gérer le questionnaire\n */\nexport const useSurveyState = () => {\n  // États pour la gestion des étapes\n  const [currentStep, setCurrentStep] = useState(0);\n  const [submitted, setSubmitted] = useState(false);\n  \n  // États pour les données du questionnaire\n  const [ratings, setRatings] = useState({});\n  const [comments, setComments] = useState({});\n  const [personalInfo, setPersonalInfo] = useState({\n    age: '',\n    nationality: '',\n    travelPurpose: '',\n    frequency: '',\n  });\n  \n  // État pour les fonctionnalités additionnelles\n  const [showFlightRadar, setShowFlightRadar] = useState(false);\n\n  // Gestionnaires d'événements\n  const handleRatingChange = (questionId, value) => {\n    setRatings(prev => ({\n      ...prev,\n      [questionId]: value\n    }));\n  };\n  \n  const handleCommentChange = (categoryId, value) => {\n    setComments(prev => ({\n      ...prev,\n      [categoryId]: value\n    }));\n  };\n  \n  const handleContinueToEvaluation = () => {\n    setCurrentStep(2);\n  };\n  \n  const handleSubmit = async () => {\n    try {\n      // Préparation des données pour l'API\n      const surveyData = {\n        language: 'fr', // À récupérer du contexte de langue\n        personalInfo: {\n          age: personalInfo.age,\n          nationality: personalInfo.nationality,\n          travelPurpose: personalInfo.travelPurpose,\n          frequency: personalInfo.frequency\n        },\n        ratings,\n        comments\n      };\n\n      // Envoi vers l'API backend\n      const response = await fetch('http://localhost:5000/api/surveys', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(surveyData)\n      });\n\n      const result = await response.json();\n\n      if (response.ok && result.success) {\n        console.log('Enquête soumise avec succès:', result.data);\n        setSubmitted(true);\n        setCurrentStep(3);\n        \n        // Optionnel: stocker l'ID de session pour référence\n        localStorage.setItem('surveySessionId', result.data.sessionId);\n      } else {\n        throw new Error(result.message || 'Erreur lors de la soumission');\n      }\n    } catch (error) {\n      console.error('Erreur lors de la soumission:', error);\n      // Gestion d'erreur - afficher un message à l'utilisateur\n      alert('Erreur lors de la soumission de l\\'enquête. Veuillez réessayer.');\n    }\n  };\n  \n  const toggleFlightRadar = () => {\n    setShowFlightRadar(prev => !prev);\n  };\n  \n  const resetSurvey = () => {\n    setSubmitted(false);\n    setCurrentStep(0);\n    setRatings({});\n    setComments({});\n    setPersonalInfo({\n      age: '',\n      nationality: '',\n      travelPurpose: '',\n      frequency: '',\n    });\n    setShowFlightRadar(false);\n  };\n\n  return {\n    // États\n    currentStep,\n    submitted,\n    ratings,\n    comments,\n    personalInfo,\n    showFlightRadar,\n    \n    // Actions\n    setCurrentStep,\n    setPersonalInfo,\n    handleRatingChange,\n    handleCommentChange,\n    handleContinueToEvaluation,\n    handleSubmit,\n    toggleFlightRadar,\n    resetSurvey\n  };\n};\n"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,OAAO;;AAEhC;AACA;AACA;AACA;AACA,OAAO,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClC;EACA,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGJ,QAAQ,CAAC,CAAC,CAAC;EACjD,MAAM,CAACK,SAAS,EAAEC,YAAY,CAAC,GAAGN,QAAQ,CAAC,KAAK,CAAC;;EAEjD;EACA,MAAM,CAACO,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC,CAAC,CAAC,CAAC;EAC1C,MAAM,CAACS,QAAQ,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAAC,CAAC,CAAC,CAAC;EAC5C,MAAM,CAACW,YAAY,EAAEC,eAAe,CAAC,GAAGZ,QAAQ,CAAC;IAC/Ca,GAAG,EAAE,EAAE;IACPC,WAAW,EAAE,EAAE;IACfC,aAAa,EAAE,EAAE;IACjBC,SAAS,EAAE;EACb,CAAC,CAAC;;EAEF;EACA,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGlB,QAAQ,CAAC,KAAK,CAAC;;EAE7D;EACA,MAAMmB,kBAAkB,GAAGA,CAACC,UAAU,EAAEC,KAAK,KAAK;IAChDb,UAAU,CAACc,IAAI,KAAK;MAClB,GAAGA,IAAI;MACP,CAACF,UAAU,GAAGC;IAChB,CAAC,CAAC,CAAC;EACL,CAAC;EAED,MAAME,mBAAmB,GAAGA,CAACC,UAAU,EAAEH,KAAK,KAAK;IACjDX,WAAW,CAACY,IAAI,KAAK;MACnB,GAAGA,IAAI;MACP,CAACE,UAAU,GAAGH;IAChB,CAAC,CAAC,CAAC;EACL,CAAC;EAED,MAAMI,0BAA0B,GAAGA,CAAA,KAAM;IACvCrB,cAAc,CAAC,CAAC,CAAC;EACnB,CAAC;EAED,MAAMsB,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC/B,IAAI;MACF;MACA,MAAMC,UAAU,GAAG;QACjBC,QAAQ,EAAE,IAAI;QAAE;QAChBjB,YAAY,EAAE;UACZE,GAAG,EAAEF,YAAY,CAACE,GAAG;UACrBC,WAAW,EAAEH,YAAY,CAACG,WAAW;UACrCC,aAAa,EAAEJ,YAAY,CAACI,aAAa;UACzCC,SAAS,EAAEL,YAAY,CAACK;QAC1B,CAAC;QACDT,OAAO;QACPE;MACF,CAAC;;MAED;MACA,MAAMoB,QAAQ,GAAG,MAAMC,KAAK,CAAC,mCAAmC,EAAE;QAChEC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACR,UAAU;MACjC,CAAC,CAAC;MAEF,MAAMS,MAAM,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;MAEpC,IAAIR,QAAQ,CAACS,EAAE,IAAIF,MAAM,CAACG,OAAO,EAAE;QACjCC,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAEL,MAAM,CAACM,IAAI,CAAC;QACxDpC,YAAY,CAAC,IAAI,CAAC;QAClBF,cAAc,CAAC,CAAC,CAAC;;QAEjB;QACAuC,YAAY,CAACC,OAAO,CAAC,iBAAiB,EAAER,MAAM,CAACM,IAAI,CAACG,SAAS,CAAC;MAChE,CAAC,MAAM;QACL,MAAM,IAAIC,KAAK,CAACV,MAAM,CAACW,OAAO,IAAI,8BAA8B,CAAC;MACnE;IACF,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdR,OAAO,CAACQ,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;MACrD;MACAC,KAAK,CAAC,iEAAiE,CAAC;IAC1E;EACF,CAAC;EAED,MAAMC,iBAAiB,GAAGA,CAAA,KAAM;IAC9BhC,kBAAkB,CAACI,IAAI,IAAI,CAACA,IAAI,CAAC;EACnC,CAAC;EAED,MAAM6B,WAAW,GAAGA,CAAA,KAAM;IACxB7C,YAAY,CAAC,KAAK,CAAC;IACnBF,cAAc,CAAC,CAAC,CAAC;IACjBI,UAAU,CAAC,CAAC,CAAC,CAAC;IACdE,WAAW,CAAC,CAAC,CAAC,CAAC;IACfE,eAAe,CAAC;MACdC,GAAG,EAAE,EAAE;MACPC,WAAW,EAAE,EAAE;MACfC,aAAa,EAAE,EAAE;MACjBC,SAAS,EAAE;IACb,CAAC,CAAC;IACFE,kBAAkB,CAAC,KAAK,CAAC;EAC3B,CAAC;EAED,OAAO;IACL;IACAf,WAAW;IACXE,SAAS;IACTE,OAAO;IACPE,QAAQ;IACRE,YAAY;IACZM,eAAe;IAEf;IACAb,cAAc;IACdQ,eAAe;IACfO,kBAAkB;IAClBI,mBAAmB;IACnBE,0BAA0B;IAC1BC,YAAY;IACZwB,iBAAiB;IACjBC;EACF,CAAC;AACH,CAAC;AAACjD,EAAA,CArHWD,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}