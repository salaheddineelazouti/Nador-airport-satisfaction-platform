const { Sequelize } = require('sequelize');
require('dotenv').config();

// Configuration de test de la base de donn√©es
const sequelize = new Sequelize(
  process.env.DB_NAME,
  process.env.DB_USER,
  process.env.DB_PASSWORD,
  {
    host: process.env.DB_HOST,
    port: process.env.DB_PORT,
    dialect: 'postgres',
    logging: console.log // Afficher les requ√™tes SQL
  }
);

async function testConnection() {
  try {
    console.log('üîÑ Test de connexion √† PostgreSQL...');
    
    // Test de la connexion
    await sequelize.authenticate();
    console.log('‚úÖ Connexion √† PostgreSQL √©tablie avec succ√®s !');
    
    // Test d'une requ√™te simple
    const [results] = await sequelize.query('SELECT version();');
    console.log('üìä Version PostgreSQL:', results[0].version);
    
    // Test de cr√©ation d'une table temporaire
    await sequelize.query(`
      CREATE TABLE IF NOT EXISTS test_connection (
        id SERIAL PRIMARY KEY,
        message TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );
    `);
    
    // Ins√©rer des donn√©es de test
    await sequelize.query(`
      INSERT INTO test_connection (message) 
      VALUES ('Test de connexion r√©ussi !');
    `);
    
    // R√©cup√©rer les donn√©es
    const [testData] = await sequelize.query('SELECT * FROM test_connection ORDER BY id DESC LIMIT 1;');
    console.log('üìù Test d\'insertion:', testData[0]);
    
    // Nettoyer
    await sequelize.query('DROP TABLE IF EXISTS test_connection;');
    console.log('üßπ Table de test supprim√©e');
    
    console.log('\nüéâ Tous les tests sont pass√©s ! PostgreSQL est pr√™t.');
    
  } catch (error) {
    console.error('‚ùå Erreur de connexion √† PostgreSQL:');
    console.error('D√©tails:', error.message);
    
    if (error.original?.code === 'ECONNREFUSED') {
      console.log('\nüí° Solutions possibles:');
      console.log('1. V√©rifiez que PostgreSQL est d√©marr√©');
      console.log('2. V√©rifiez le port (5432 par d√©faut)');
      console.log('3. V√©rifiez les identifiants dans le fichier .env');
    }
    
    if (error.original?.code === '3D000') {
      console.log('\nüí° La base de donn√©es n\'existe pas.');
      console.log('Cr√©ez-la avec: CREATE DATABASE nador_airport_satisfaction;');
    }
    
    if (error.original?.code === '28P01') {
      console.log('\nüí° Erreur d\'authentification.');
      console.log('V√©rifiez le nom d\'utilisateur et mot de passe dans .env');
    }
  } finally {
    await sequelize.close();
    console.log('üîí Connexion ferm√©e');
  }
}

// Lancer le test
testConnection();
